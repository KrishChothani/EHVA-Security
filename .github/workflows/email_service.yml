name: Universal Email Sender

on:
  workflow_call:
    inputs:
      to:
        description: "Recipient email(s), comma-separated"
        required: true
        type: string
      subject:
        description: "Subject of the email"
        required: true
        type: string
      body:
        description: "HTML or plain text content of the email"
        required: true
        type: string

      # Optional
      sender_name:
        description: "Display name of the sender"
        required: false
        type: string
      reply_to:
        description: "Reply-To email address"
        required: false
        type: string
      cc:
        description: "CC email address(es), comma-separated"
        required: false
        type: string
      bcc:
        description: "BCC email address(es), comma-separated"
        required: false
        type: string
      attachments:
        description: "JSON array of nodemailer attachments: [{filename, path, content, contentType}]"
        required: false
        type: string

    secrets:
      SMTP_HOST:
        required: true
      SMTP_PORT:
        required: true
      SMTP_USER:
        required: true
      SMTP_PASS:
        required: true

jobs:
  send_email:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Nodemailer
        run: npm install nodemailer

      - name: Send Email via Nodemailer
        run: |
          node -e "
            const nodemailer = require('nodemailer');

            const port = Number(process.env.SMTP_PORT) || 587;
            const secure = port === 465;

            const transporter = nodemailer.createTransport({
              host: process.env.SMTP_HOST,
              port,
              secure,
              auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS }
            });

            // Parse attachments if provided
            let attachments = undefined;
            if (process.env.ATTACHMENTS && process.env.ATTACHMENTS.trim()) {
              try {
                const parsed = JSON.parse(process.env.ATTACHMENTS);
                if (Array.isArray(parsed) && parsed.length) attachments = parsed;
              } catch (e) {
                console.warn('⚠️ Invalid attachments JSON. Ignoring attachments.');
              }
            }

            // Build mail options
            const from =
              process.env.SENDER_NAME && process.env.SENDER_NAME.trim()
                ? \`\${process.env.SENDER_NAME} <\${process.env.SMTP_USER}>\`
                : process.env.SMTP_USER;

            const cc = process.env.CC && process.env.CC.trim() ? process.env.CC : undefined;
            const bcc = process.env.BCC && process.env.BCC.trim() ? process.env.BCC : undefined;
            const replyTo = process.env.REPLY_TO && process.env.REPLY_TO.trim() ? process.env.REPLY_TO : undefined;

            const body = process.env.BODY || '';
            const isHtml = /<\/?[a-z][\s\S]*>/i.test(body); // naive HTML detection

            const mailOptions = {
              from,
              to: process.env.TO,
              cc,
              bcc,
              replyTo,
              subject: process.env.SUBJECT,
              ...(isHtml ? { html: body } : { text: body }),
              attachments
            };

            transporter.sendMail(mailOptions, (err, info) => {
              if (err) {
                console.error('❌ Email failed:', err.message || err);
                process.exit(1);
              } else {
                console.log('✅ Email sent:', info.response);
              }
            });
          "
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}

          TO: ${{ inputs.to }}
          SUBJECT: ${{ inputs.subject }}
          BODY: ${{ inputs.body }}

          SENDER_NAME: ${{ inputs.sender_name || '' }}
          REPLY_TO: ${{ inputs.reply_to || '' }}
          CC: ${{ inputs.cc || '' }}
          BCC: ${{ inputs.bcc || '' }}
          ATTACHMENTS: ${{ inputs.attachments || '' }}
