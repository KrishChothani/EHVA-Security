name: Universal Email Sender

on:
  workflow_call:
    inputs:
      maintainer_email:
        description: "Recipient email address (can be one or multiple, comma-separated)"
        required: true
        type: string

      subject:
        description: "Subject of the email"
        required: true
        type: string

      body:
        description: "HTML or plain text content of the email"
        required: true
        type: string

      # Optional inputs for advanced context
      sender_name:
        description: "Display name of sender"
        required: false
        type: string
      cc:
        description: "CC email addresses (comma-separated)"
        required: false
        type: string
      bcc:
        description: "BCC email addresses (comma-separated)"
        required: false
        type: string
      attachments:
        description: "JSON array of attachments [{filename, path, content}]"
        required: false
        type: string

    secrets:
      SMTP_HOST:
        required: true
      SMTP_PORT:
        required: true
      SMTP_USER:
        required: true
      SMTP_PASS:
        required: true

jobs:
  send_email:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Nodemailer
        run: npm install nodemailer

      - name: Send Email via Nodemailer
        run: |
          node -e "
            const nodemailer = require('nodemailer');
            const port = Number(process.env.SMTP_PORT) || 465;

            const transporter = nodemailer.createTransport({
              host: process.env.SMTP_HOST,
              port,
              secure: port === 465,
              auth: { user: process.env.SMTP_USER, pass: process.env.SMTP_PASS }
            });

            let attachments = [];
            try {
              attachments = process.env.ATTACHMENTS ? JSON.parse(process.env.ATTACHMENTS) : [];
            } catch (e) {
              console.warn('⚠️ Invalid attachment format, ignoring attachments.');
            }

            const mailOptions = {
              from: process.env.SENDER_NAME 
                ? \`\${process.env.SENDER_NAME} <\${process.env.SMTP_USER}>\`
                : process.env.SMTP_USER,
              to: process.env.MAINTAINER_EMAIL,
              cc: process.env.CC || undefined,
              bcc: process.env.BCC || undefined,
              subject: process.env.SUBJECT,
              html: process.env.BODY,
              attachments
            };

            transporter.sendMail(mailOptions, (err, info) => {
              if (err) {
                console.error('❌ Email failed:', err);
                process.exit(1);
              } else {
                console.log('✅ Email sent successfully:', info.response);
              }
            });
          "
        env:
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          MAINTAINER_EMAIL: ${{ inputs.maintainer_email }}
          SUBJECT: ${{ inputs.subject }}
          BODY: ${{ inputs.body }}
          SENDER_NAME: ${{ inputs.sender_name || '' }}
          CC: ${{ inputs.cc || '' }}
          BCC: ${{ inputs.bcc || '' }}
          ATTACHMENTS: ${{ inputs.attachments || '[]' }}
